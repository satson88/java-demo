pipeline { 
    agent any

    environment {
        registry = "satson88"  // Replace with your Docker registry URL
        DOCKERHUB_CREDENTIALS= credentials('docker-satson88')
        imageName = "java-demo"  // Replace with your desired image name
        containerName = "java-app-container"  // Replace with your desired container name
        dockerfilePath = "./Dockerfile"  // Replace with the path to your Dockerfile
        dockerArgs = "-p 8081:8080"  // Replace with your desired container arguments
        //serverip = "10.0.1.205"
        //version = sh(script: 'jq \'.version\' version.json', returnStdout: true).trim()
        //name = sh(script: 'cat pom.xml | grep -A1 java-demo | grep artifactId | awk -F'[><]' '{print $3}'' , returnStdout: true).trim()
        version = sh(script: "cat pom.xml | grep -A1 java-demo | grep version | awk -F'[><]' '{print \$3}'", returnStdout: true).trim()
    }
    stages {
        stage('Clean WS') { 
            steps { 
                cleanWs()
            }
        }
        stage('SCM'){
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/satson88/java-demo.git']])
            }
        }
        
        stage('Docker Login') {
            steps {
                   sh 'echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'     		 
                }
            }
        

        stage('Build') {
            steps {
                
                sh "sudo docker build -t ${registry}/${imageName}:${version} -f ${dockerfilePath} ."
            }
        }

         stage('Unit Test') {
            steps {
                
                sh "/usr/bin/mvn test"
            }
        } 
        
        stage('Push to Artifcatory') {
            steps {
                sh "sudo docker push ${registry}/${imageName}:${version}"
            }
        }

        stage('Code Analysis') {
            steps {
                sh "/usr/bin/mvn clean verify sonar:sonar \
                    -Dsonar.projectKey=java-demo \
                    -Dsonar.host.url=http://3.110.181.9:9000 \
                    -Dsonar.login=6b614f5b8acedf3d6193e1eabec0acc37c0281b5"
            }
        } 


        stage('Deploy') {
            steps {
                script {
                    // Define Kubernetes Deployment YAML
                   def jenkinsDeployment = '''
                        apiVersion: apps/v1
                        kind: Deployment
                        metadata:
                            name: java-demo
                        spec:
                            replicas: 1
                            selector:
                              matchLabels:
                                app: java-demo
                            template:
                              metadata:
                                labels:
                                  app: java-demo
                              spec:
                                containers:
                                - name: java-demo
                                  image: satson88/java-demo:3.0
                    ---
                        apiVersion: v1
                        kind: Service
                        metadata:
                          name: svc-java-demo
                        spec:
                          selector:
                            app: java-demo
                         ports:
                            - protocol: TCP
                              port: 80
                              targetPort: 8080
                          type: LoadBalancer
                '''
                    // Apply Deployment using kubectl
                    kubeDeploy(configFile: "${KUBECONFIG}", namespace: 'default', manifests: "${deploymentYaml}\n---\n${serviceYaml}")
                    sh "echo '${jenkinsDeployment}' | kubectl apply -f -"
        
                
            }
        }
    }
}
}